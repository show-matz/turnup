<html>
<header>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
	<meta http-equiv="Content-Style-Type" content="text/css">
	<title>turnup readme</title>
	<link rel=stylesheet href="./default.css">
</header>
<body>
<!-- define: APPNAME = turnup -->
<!-- define: BLANK_PARAGRAPH = '　　' -->
<!-- config:term-link-in-header -->			
<!-- config:write-comment -->			
<!-- config:header-numbering 2 4 -->			
<h1><a name='iI4sykJQemx'></a>README - turnup</h1>
<p>　この文書は、 <strong>turnup</strong> のためのマニュアル文書です。</p>
<h2><a name='0qJQvVjc3Xy'></a>1 Table of contents</h2>
<ul>
<li><a href='#0qJQvVjc3Xy'>1 Table of contents</a></li>
<li><a href='#ii4jRxV2ffy'>2 turnup とは</a></li>
<li><a href='#dcPEbaWhYMa'>3 用語</a></li>
<li><a href='#h1vILBov6aJ'>4 使い方</a></li>
<li><a href='#8wGebtcPJwd'>5 記法</a></li>
<ul>
<li><a href='#7HkxqP1TWY5'>5.1 見出し</a></li>
<li><a href='#jGghWL1I5CM'>5.2 箇条書きリスト</a></li>
<li><a href='#iYSlVZhYmRM'>5.3 番号付きリスト</a></li>
<li><a href='#2HUs4TZfCPd'>5.4 preブロック</a></li>
<li><a href='#g6xjP526KX7'>5.5 テーブル</a></li>
<li><a href='#2c4WKrG50Sg'>5.6 引用</a></li>
<li><a href='#9PbJaRizVB7'>5.7 定義リスト</a></li>
<li><a href='#cPmXTXvPhJd'>5.8 コメント</a></li>
<li><a href='#d2FXT7Fqg21'>5.9 強調</a></li>
<li><a href='#hBdBkqlaJVW'>5.10 取消し線</a></li>
<li><a href='#9k1sm8QrDHi'>5.11 マーカー</a></li>
<li><a href='#hVz7Qq0YetS'>5.12 上付きと下付き</a></li>
<li><a href='#fbLcMRTVXac'>5.13 リンク</a></li>
<li><a href='#2TegSYAerqJ'>5.14 コード</a></li>
<li><a href='#ba5hSrekAxp'>5.15 水平線</a></li>
<li><a href='#hpQu1WK1Nkr'>5.16 画像の挿入</a></li>
<li><a href='#akoPHkUM3jR'>5.17 改行の挿入</a></li>
<li><a href='#iwCMutWJWjc'>5.18 段落</a></li>
</ul>
<li><a href='#i9uAZw3xFSK'>6 拡張機能</a></li>
<ul>
<li><a href='#kyMp8IkRK8n'>6.1 文書タイトルとスタイルシートの指定</a></li>
<li><a href='#gg7i7uPfLlo'>6.2 図と表のタイトル</a></li>
<li><a href='#2Hh9eF0BTk3'>6.3 インラインスタイル指定</a></li>
<li><a href='#dOeJnU6OE95'>6.4 スタイルスタック</a></li>
<li><a href='#hVp0EDLBsmJ'>6.5 スタイルパレット</a></li>
<li><a href='#cjJv49XsD9d'>6.6 ページ内へのリンク</a></li>
<li><a href='#6LkDjrI3ASb'>6.7 生の HTML の出力</a></li>
<li><a href='#9Dfk88hOKmk'>6.8 脚注</a></li>
<li><a href='#7maM1Z8DaEp'>6.9 目次の生成</a></li>
<li><a href='#iVFblGs7lu7'>6.10 図表一覧の生成</a></li>
<li><a href='#9rssNl2PzbD'>6.11 定義リストへの自動リンク</a></li>
<li><a href='#f71ZNSHqufB'>6.12 フィルタ機能</a></li>
<li><a href='#18dTPnzNOgg'>6.13 外部フィルタの登録</a></li>
<li><a href='#hMHXjTrWEnw'>6.14 領域の折り畳み</a></li>
<li><a href='#a2FYBDWqZUA'>6.15 別ファイルの include</a></li>
<li><a href='#hs1guSfsFGb'>6.16 改ページ指定</a></li>
<li><a href='#4eSrElLWBcH'>6.17 変数の定義と展開</a></li>
<ul>
<li><a href='#2yDQLphjQX0'>6.17.1 データ内での設定と展開</a></li>
<li><a href='#kW5fA3S8XIj'>6.17.2 起動オプションでの変数設定</a></li>
<li><a href='#9Z7pya1EZOR'>6.17.3 システム変数</a></li>
</ul>
<li><a href='#8sNFPrNb9kM'>6.18 条件分岐</a></li>
<li><a href='#bs9N19eIT7w'>6.19 エラーと警告の出力</a></li>
</ul>
<li><a href='#cNngUDCfTMJ'>7 設定</a></li>
<ul>
<li><a href='#fH3KsaVXKY8'>7.1 見出しにおける用語の自動リンク</a></li>
<li><a href='#2M8QFQ2XeBn'>7.2 見出しの自動ナンバリング</a></li>
<li><a href='#hJJbL4GzVpQ'>7.3 図表のナンバリング単位</a></li>
<li><a href='#jkzhEyZU0ts'>7.4 スタイルシートの埋め込み</a></li>
<li><a href='#8a3vnTcmVrk'>7.5 コメントの出力</a></li>
</ul>
<li><a href='#4e69JBVCRLW'>8 細かい話</a></li>
<ul>
<li><a href='#fSSOiFwQpEj'>8.1 入力ファイルのエンコーディングと改行スタイル</a></li>
<li><a href='#9s47bTtYstx'>8.2 文字装飾やリンクの制約と継続行</a></li>
<li><a href='#9IN7afRR0hr'>8.3 内部的な処理順序</a></li>
<li><a href='#6lxsyJvfG4q'>8.4 一部の文字装飾における制約</a></li>
<li><a href='#l3wNcsiymoY'>8.5 フィルタ機能について</a></li>
<li><a href='#8pNcG5W73uy'>8.6 領域の折り畳みについて</a></li>
</ul>
<li><a href='#8tTIqHSNoTg'>9 既知の問題点</a></li>
<ul>
<li><a href='#95miNJcW6DM'>9.1 【解決済】リンクテキストの末尾に文字装飾があると正しく処理されない</a></li>
<li><a href='#kjPiZRKvp7P'>9.2 【解決済】テーブルで colspan/rowspan を使うとアライメント指定がずれる</a></li>
<li><a href='#78o6GpB2DHz'>9.3 【解決済】条件分岐でファイル存在チェックをしても include がエラーになる</a></li>
</ul>
<li><a href='#dGdSPnvay5N'>10 更新履歴</a></li>
</ul>
<p>　　</p>
<h2><a name='ii4jRxV2ffy'></a>2 turnup とは</h2>
<p>　turnup は、<a class='term' href='#b3GXdVHw3CE'>Markdown</a> 書法で作成したテキストファイルから <a class='term' href='#ahN3t8jbawv'>HTML</a> を出力するツールです<sup><a name='footnote_ref1' href='#footnote1'>1</a></sup>。このマニュアル文書自体、turnup で作成されています。</p>
<h2><a name='dcPEbaWhYMa'></a>3 用語</h2>
<dl>
<dt><a name='fgvQnqibuC4'></a>GFM</dt>
<dd>GitHub Flavored <a class='term' href='#b3GXdVHw3CE'>Markdown</a> というものの略語だそうです。turnup は可能な範囲でサポートするように心掛けています。</dd>
</dl>
<dl>
<dt><a name='b3GXdVHw3CE'></a>Markdown</dt>
<dd>マークダウンと読みます。<a class='term' href='#ahN3t8jbawv'>HTML</a> の Mark up をしないで済むという意図なんでしょうけど、命名にセンスが‥‥‥ね。</dd>
</dl>
<dl>
<dt><a name='ahN3t8jbawv'></a>HTML</dt>
<dd>Hyper text markup language の略語です。</dd>
</dl>
<dl>
<dt><a name='8sf6EgPf8j8'></a>空白類文字</dt>
<dd>スペース文字、タブ文字を意味します。いわゆる全角スペース文字も含みます。</dd>
</dl>
<h2><a name='h1vILBov6aJ'></a>4 使い方</h2>
<p>　入力となるファイルの名前をパラメータとして起動してください。生成された <a class='term' href='#ahN3t8jbawv'>HTML</a> は標準出力に書き出されるので、必要に応じてリダイレクトしてください。</p>
<pre>
  turnup  input.md  &gt;  output.htm
</pre>
<p>　入出力ファイルのエンコーディングは utf-8 で固定となっています。それ以外のエンコーディングへの対応は現状では予定されていません。<a href='#4e69JBVCRLW'>細かい話</a>も参照してください。</p>
<h2><a name='8wGebtcPJwd'></a>5 記法</h2>
<p>　turnup の入力書式は一般的な <a class='term' href='#b3GXdVHw3CE'>Markdown</a> 書法と基本的に同じですが、いくつかの拡張機能<sup><a name='footnote_ref2' href='#footnote2'>2</a></sup>を備えています。</p>
<h3><a name='7HkxqP1TWY5'></a>5.1 見出し</h3>
<p>　行頭から１〜６個の # を記述し、続けて（半角）スペースをひとつ書いた行は見出し行になります。後続する文字列が見出しのタイトルとなります。# の数に応じて h1 〜 h6 になります。</p>
<pre>
 # header1
 ## header2
 ### header3
 #### header4
 ##### header5
 ###### header6
</pre>
<p>　<a href='#i9uAZw3xFSK'>拡張機能</a>により、<a href='#2M8QFQ2XeBn'>見出しに番号を自動付与</a>したり、<a href='#7maM1Z8DaEp'>見出しから目次を生成</a>したりできます。</p>
<h3><a name='jGghWL1I5CM'></a>5.2 箇条書きリスト</h3>
<p>　-（ハイフン）、+（プラス）、または *（アスタリスク）にスペースを後続させると、箇条書きリストになります。ネストさせたい場合は、行頭にタブ文字を使用してください。</p>
<pre>
- List A
+ List B
	* List B - 1
	- List B - 2
		+ List B - 2 - 1
		* List B - 2 - 2
- List C
</pre>
<p>　上記は、以下のように出力されます。</p>
<ul>
<li>List A</li>
<li>List B</li>
<ul>
<li>List B - 1</li>
<li>List B - 2</li>
<ul>
<li>List B - 2 - 1</li>
<li>List B - 2 - 2</li>
</ul>
</ul>
<li>List C</li>
</ul>
<p>　また、- などの先頭記号とスペースに続けて [ ] や [X] を記述すると、チェックボックス付きリストになります。</p>
<pre>
- Task list
	- [X] completed task
		* point 1
		* point 2
	- [ ] not completed task
</pre>
<p>　上記は、以下のように出力されます。</p>
<ul>
<li>Task list</li>
<ul>
<li style='list-style-type:none;'><input type='checkbox' onclick='return false;'>completed task</li>
<ul>
<li>point 1</li>
<li>point 2</li>
</ul>
<li style='list-style-type:none;'><input type='checkbox' onclick='return false;' checked>not completed task</li>
</ul>
</ul>
<h3><a name='iYSlVZhYmRM'></a>5.3 番号付きリスト</h3>
<p>　数字にピリオドとスペースを後続させると、番号付きリストになります。ネストさせたい場合は、行頭にタブ文字を使用してください。</p>
<pre>
1. List A
1. List B
	1. List B - 1
	1. List B - 2
		1. List B - 2 - 1
1. List C
</pre>
<p>　上記は、以下のように出力されます。</p>
<ol>
<li>List A</li>
<li>List B</li>
<ol>
<li>List B - 1</li>
<li>List B - 2</li>
<ol>
<li>List B - 2 - 1</li>
</ol>
</ol>
<li>List C</li>
</ol>
<h3><a name='2HUs4TZfCPd'></a>5.4 preブロック</h3>
<p>　バッククォート3つ、またはチルダ3つだけからなる行で囲まれたブロックは <code>&lt;pre&gt;</code> ブロックとなります。<sup><a name='footnote_ref3' href='#footnote3'>3</a></sup></p>
<pre>
~~~
int main( void ) {
    std::cout &lt;&lt; "hello world." &lt;&lt; std::endl;
    return 0;
}
~~~
</pre>
<p>　上記は、以下のように出力されます。</p>
<pre>
int main( void ) {
    std::cout &lt;&lt; "hello world." &lt;&lt; std::endl;
    return 0;
}
</pre>
<p>　拡張機能として、preブロックを開始する行に言語などの名前をつけることでコードハイライトをする機能もあります。これについての詳細は<a href='#f71ZNSHqufB'>6.12  フィルタ機能</a>を参照してください。</p>
<h3><a name='g6xjP526KX7'></a>5.5 テーブル</h3>
<p>　以下のような記述でテーブルを作成できます。この場合、１行目は常にヘッダ行（th タグ）であり、２行目以降がデータ行（td タグ）になります。</p>
<pre>
| header A | header B | header C |	
|     0    |     1    |    2     |	
|     3    |     4    |    5     |	
|     6    |     7    |    8     |	
</pre>
<p>　上記は、以下のようになります。この場合、各列のデータはすべて左寄せになります。</p>
<table align='center'>
<tr><th>header A</th><th>header B</th><th>header C</th></tr>
<tr><td align='left'>0</td><td align='left'>1</td><td align='left'>2</td></tr>
<tr><td align='left'>3</td><td align='left'>4</td><td align='left'>5</td></tr>
<tr><td align='left'>6</td><td align='left'>7</td><td align='left'>8</td></tr>
</table>
<p>　列毎に中央揃え、右寄せなどのアライメント指定を指定をしたい場合には、２行目に :---: や ---: を記述します。</p>
<pre>
| header A | header B | header C |	
| :------- | :------: | -------: |	
|     0    |     1    |    2     |	
|     3    |     4    |    5     |	
|     6    |     7    |    8     |	
</pre>
<p>　上記は、以下のように出力されます（表はデフォルトでセンタリングされます）。</p>
<table align='center'>
<tr><th>header A</th><th>header B</th><th>header C</th></tr>
<tr><td align='left'>0</td><td align='center'>1</td><td align='right'>2</td></tr>
<tr><td align='left'>3</td><td align='center'>4</td><td align='right'>5</td></tr>
<tr><td align='left'>6</td><td align='center'>7</td><td align='right'>8</td></tr>
</table>
<p>　拡張機能として、２行目に記述する :---: や ---: では、- のかわりに = を使用することができます。 <code>:====:</code> などとした場合、その列は nowrap 指定が追加され、<strong>「自動的な折り返しを禁止」</strong> することができます<sup><a name='footnote_ref4' href='#footnote4'>4</a></sup>。</p>
<p>　さらに、:---: や ---: の行は２行目よりも後ろに書くことができます。それにより、複数行に渡るヘッダ行を記述することができます。以下のように。</p>
<pre>
|     A    |     B    |    C     |	
|   Alpha  |   Bravo  |  Charlie |	
| :------- | :------: | -------: |	
|     0    |     1    |    2     |	
|     3    |     4    |    5     |	
|     6    |     7    |    8     |	
</pre>
<p>　上記は、以下のように出力されます。</p>
<table align='center'>
<tr><th>A</th><th>B</th><th>C</th></tr>
<tr><th>Alpha</th><th>Bravo</th><th>Charlie</th></tr>
<tr><td align='left'>0</td><td align='center'>1</td><td align='right'>2</td></tr>
<tr><td align='left'>3</td><td align='center'>4</td><td align='right'>5</td></tr>
<tr><td align='left'>6</td><td align='center'>7</td><td align='right'>8</td></tr>
</table>
<p>　別の拡張として、セル結合がサポートされています。セルを開始する | の直後に N&gt; （ここで N は数値）を指定することで、セルを横方向に N 列結合させることができます。同様に、N^ とすることでセルを縦方向に N 列結合させることができます<sup><a name='footnote_ref5' href='#footnote5'>5</a></sup>。以下に例を示します。</p>
<pre>
|2&gt;      A &amp; B        |2^ C&lt;br&gt;Charlie |	
|   Alpha  |   Bravo  |  
| :------- | :------: | -------: |	
|     0    |     1    |    2     |	
|     3    |     4    |    5     |	
|     6    |     7    |    8     |	
</pre>
<p>　上記は、以下のように出力されます。</p>
<table align='center'>
<tr><th colspan='2'>A &amp; B</th><th rowspan='2'>C<br>Charlie</th></tr>
<tr><th>Alpha</th><th>Bravo</th></tr>
<tr><td align='left'>0</td><td align='center'>1</td><td align='right'>2</td></tr>
<tr><td align='left'>3</td><td align='center'>4</td><td align='right'>5</td></tr>
<tr><td align='left'>6</td><td align='center'>7</td><td align='right'>8</td></tr>
</table>
<p>　　</p>
<p>　アライメント指定行は複数記述できるようになりました。最初のアライメント指定行がヘッダとデータの境界となるのは従来通りで、アライメント指定は次のアライメント指定行が登場するまでの間有効となります。これにより、<a href='#kjPiZRKvp7P'>セル結合とアライメント指定を併用した場合の問題</a>に対処することができます。以下に例を示します。</p>
<pre>
| column A | column B | column C |
|:---------|:--------:|---------:|
|left      |center    |right     |
|:--------------------|---------:|
|2&gt; left              |right?    |
|:---------|:--------:|---------:|
|left      |center    |right     |
</pre>
<table align='center'>
<tr><th>column A</th><th>column B</th><th>column C</th></tr>
<tr><td align='left'>left</td><td align='center'>center</td><td align='right'>right</td></tr>
<tr><td align='left' colspan='2'>left</td><td align='right'>right?</td></tr>
<tr><td align='left'>left</td><td align='center'>center</td><td align='right'>right</td></tr>
</table>
<h3><a name='2c4WKrG50Sg'></a>5.6 引用</h3>
<p>　行頭を &gt; で始めると引用になります。複数の &gt; 連続させると多段の引用になります。<sup><a name='footnote_ref6' href='#footnote6'>6</a></sup></p>
<pre>
&gt; lv.1 - 1
&gt; lv.1 - 2
&gt;&gt; lv.2 - 1
&gt;&gt; lv.2 - 2
&gt;&gt;&gt; lv.3
&gt; lv.1
&gt;&gt;&gt;&gt; lv.4
&gt;&gt; lv.2
</pre>
<p>　上記は、以下のように出力されます。</p>
<blockquote>
lv.1 - 1<br>
lv.1 - 2<br>
<blockquote>
lv.2 - 1<br>
lv.2 - 2<br>
<blockquote>
lv.3<br>
</blockquote>
</blockquote>
lv.1<br>
<blockquote>
<blockquote>
<blockquote>
lv.4<br>
</blockquote>
</blockquote>
lv.2<br>
</blockquote>
</blockquote>
<h3><a name='9PbJaRizVB7'></a>5.7 定義リスト</h3>
<p>　以下のような記述により、定義リストを作成できます。turnup では、これによって定義された用語は<a href='#9rssNl2PzbD'>自動リンク</a>の対象となります。</p>
<pre>
  *[用語]: 用語の定義をここに記述します。
  複数行に渡る定義も記述できます。空行で終わります。

</pre>
<p>　上記は、以下のように出力されます。</p>
<!-- start raw html -->
<dl>
  <dt>用語</dt>
  <dd>用語の定義をここに記述します。複数行に渡る定義も記述できます。空行で終わります。</dd>
</dl>
<!-- end raw html -->
<p>　[ と ] に囲まれた用語は、前後のスペースは無視されますが、途中にあるスペースは用語の一部とみなされます。</p>
<h3><a name='cPmXTXvPhJd'></a>5.8 コメント</h3>
<p>　turnup は、以下のような <a class='term' href='#ahN3t8jbawv'>HTML</a> 形式のコメントをコメントとして扱います。つまり、出力される <a class='term' href='#ahN3t8jbawv'>HTML</a> の内容には含まれません。</p>
<!-- start raw html -->
<pre>
  &lt;!-- comment --&gt;

  &lt;!--
    multi
    line
    comment
  --&gt;
</pre>
<!-- end raw html -->
<p>　ただし、この挙動は変更することができます。<a href='#8a3vnTcmVrk'>write-comment設定</a>を参照してください。</p>
<h3><a name='d2FXT7Fqg21'></a>5.9 強調</h3>
<p>　1 〜 3 個の連続するアスタリスクまたはアンダースコアで括ることにより、文字列を強調することができます。どのように表示されるのかは、スタイルシート次第です。</p>
<ul>
<li>１つだと、em タグによる強調になります。 <code>*これ*</code> が、 <em>これ</em> になります。</li>
<li>２つだと、strong タグによる強調になります。 <code>**これ**</code> が、 <strong>これ</strong> になります。</li>
<li>３つだと、em と strong の併用になります。 <code>***これ***</code> が、 <em><strong>これ</strong></em> になります。</li>
</ul>
<p>　この書法が適用されるルールには、少し細かい規則があります。<a href='#6lxsyJvfG4q'>8.4  一部の文字装飾における制約</a>を参照してください。</p>
<h3><a name='hBdBkqlaJVW'></a>5.10 取消し線</h3>
<p>　２つのチルダ ~~ で括ることで、文字列に取消線を引くことができます。<code>~~この部分は取消し~~</code> が、 <strike>この部分は取消し</strike> になります。</p>
<p>　この書法が適用されるルールには、少し細かい規則があります。<a href='#6lxsyJvfG4q'>8.4  一部の文字装飾における制約</a>を参照してください。</p>
<h3><a name='9k1sm8QrDHi'></a>5.11 マーカー</h3>
<p>　== を使って括ることで、マーカーを利用することができます。スタイルシート次第ですが、 <code>==例えばこんなふう==</code> が、 <mark>例えばこんなふう</mark> になります。</p>
<p>　この書法が適用されるルールには、少し細かい規則があります。<a href='#6lxsyJvfG4q'>8.4  一部の文字装飾における制約</a>を参照してください。</p>
<h3><a name='hVz7Qq0YetS'></a>5.12 上付きと下付き</h3>
<p>　単一の ^ および ~ で括ると、文字列を上付きと下付きにできます。たとえば <code>H~2~O</code> は H<sub>2</sub>O に、 <code>2^10^ = 1024</code> は 2<sup>10</sup> = 1024 になります。</p>
<h3><a name='fbLcMRTVXac'></a>5.13 リンク</h3>
<p>　文章中で以下のような書き方をすることで、URL へのリンクを貼ることができます。<sup><a name='footnote_ref7' href='#footnote7'>7</a></sup></p>
<pre>
  [テキスト](URL)
</pre>
<p>　たとえば、 <code>[Google](https://www.google.co.jp/)</code> は <a href='https://www.google.co.jp/'>Google</a> となります。テキスト部分を省略すると、URL がそのまま表示されます。つまり、<code>[](https://www.google.co.jp/)</code> は <a href='https://www.google.co.jp/'>https://www.google.co.jp/</a> となります。</p>
<p>　拡張機能として、ページ内の見出しや図表タイトルへのリンクを作成することもできます。<a href='#cjJv49XsD9d'>6.6  節</a>を参照してください。</p>
<h3><a name='2TegSYAerqJ'></a>5.14 コード</h3>
<p>　文章中では、以下のようにバッククォートで括ることで、囲まれた部分をコードとして表示させられます。この内部にある文字列は、用語の自動リンクやその他の文字装飾は実行されません。</p>
<pre>
  `code`
</pre>
<p>　この書法が適用されるルールには、少し細かい規則があります。<a href='#6lxsyJvfG4q'>8.4  一部の文字装飾における制約</a>を参照してください。</p>
<h3><a name='ba5hSrekAxp'></a>5.15 水平線</h3>
<p>　行頭からハイフン、等号、アンダースコア、アスタリスクを３個以上を記述すると水平線として出力されます。文字種は混在させないでください。</p>
<h3><a name='hpQu1WK1Nkr'></a>5.16 画像の挿入</h3>
<p>　画像を表示させるには、以下のように記述します。独立した行として記述することもできますし、文章中にインラインで挿入させることもできます。</p>
<pre>
  ![代替テキスト](画像URL)
</pre>
<p>　上記は、以下のように展開されます。なお、代替テキストは省略できます。</p>
<pre>
  &lt;img src='画像URL' alt='代替テキスト' /&gt;
</pre>
<h3><a name='akoPHkUM3jR'></a>5.17 改行の挿入</h3>
<p>　文中で改行させるには、<a class='term' href='#ahN3t8jbawv'>HTML</a> タグ <code>&lt;br&gt;</code> をそのまま書きます。</p>
<h3><a name='iwCMutWJWjc'></a>5.18 段落</h3>
<p>　拡張機能を含め、他の書法と認識されない行はすべて段落の開始とみなされます。段落は空行または<a href='#cPmXTXvPhJd'>コメント</a>行に至るまでのすべての行が連結され、単一の段落として出力されます。</p>
<p>　　</p>
<h2><a name='i9uAZw3xFSK'></a>6 拡張機能</h2>
<p>　turnup には、いくつかの拡張機能があります。一般的な <a class='term' href='#b3GXdVHw3CE'>Markdown</a> の書法からは逸脱しますが、文書作成に必要と判断して追加しているものです。</p>
<h3><a name='kyMp8IkRK8n'></a>6.1 文書タイトルとスタイルシートの指定</h3>
<p>　データファイルの冒頭に以下のようなコメントを記述することで、出力される <a class='term' href='#ahN3t8jbawv'>HTML</a> ファイルのヘッダに設定するタイトルとスタイルシートを指定することができます。</p>
<pre>
  &lt;!-- title:Document title --&gt;
  &lt;!-- style:./default.css --&gt;
</pre>
<p>　このうち、スタイルシートの指定は設定の影響を受けます。詳細は<a href='#jkzhEyZU0ts'>embed-stylesheet設定</a>を参照してください。</p>
<h3><a name='gg7i7uPfLlo'></a>6.2 図と表のタイトル</h3>
<p>　図と表には、専用のタイトルをつけることができます。図（大抵は画像を表示させるという意味ですが）の場合、以下のように行頭に <code>Figure.</code> を、それに続いてタイトルを書きます。</p>
<pre>
![](some-figure.png)
Figure. title of figure
</pre>
<p>　表の場合は行頭に <code>Table.</code> を、それに続いてタイトルを書きます。</p>
<pre>
Table. title of table
| header1 | header2 |
| :------ | :-----: |
|    0    |    1    |
|    2    |    3    |
</pre>
<p>　この方法でタイトルをつけておけば、同じく拡張機能の<a href='#iVFblGs7lu7'>図表一覧の生成</a>機能で一覧を生成することができます。</p>
<p>　見出しと同様に、図表のタイトルには自動的に番号付けを行なうことができます。詳細は「<a href='#hJJbL4GzVpQ'>7.3  図表のナンバリング単位</a>」を参照してください。</p>
<h3><a name='2Hh9eF0BTk3'></a>6.3 インラインスタイル指定</h3>
<p>　文章中などで部分的に文字色やその他のスタイルを指定したい場合、インラインスタイル指定が使用できます。以下のいずれかの書法<sup><a name='footnote_ref8' href='#footnote8'>8</a></sup>で、 <code>STYLES</code> 部分には <a class='term' href='#ahN3t8jbawv'>HTML</a> の style に指定する内容をそのまま記述します。</p>
<pre>
 @{{STYLES}{CONTENTS}}
 @((STYLES)(CONTENTS))
</pre>
<p>　上記は、 <code>&lt;span style='STYLES'&gt;CONTENTS&lt;/span&gt;</code> のように展開されます。たとえば、<code>@((background:red; color:white;)(赤地の白抜き))</code> が<span style='background:red; color:white;'>赤地の白抜き</span>になります。</p>
<p>　範囲指定でタグ別にスタイルを指定したい場合、次に説明する「<a href='#dOeJnU6OE95'>スタイルスタック</a>」を利用してください。</p>
<h3><a name='dOeJnU6OE95'></a>6.4 スタイルスタック</h3>
<p>　<a href='#2Hh9eF0BTk3'>インラインスタイル指定</a> は文章の一部分にスタイルを指定するものでしたが、もっと広い範囲でスタイルを一時的に変更したい場合もあります。そのような場合には、 <strong>「スタイルスタック」</strong> が使用できます。これは、以下の要領で <a class='term' href='#ahN3t8jbawv'>HTML</a> タグと区間を指定し、class や style を設定するものです。</p>
<pre>
 &lt;!-- stack:push p style="color: red;" --&gt;
        :
        :
 &lt;!-- stack:pop p --&gt;
</pre>
<p>　上記の例では、 <code>stack:push</code> として p タグに style を設定しています。この行以降、<code>stack:pop p</code> されるまでの間に turnup が生成する全ての p タグには、 <code>style="color: red;"</code>が設定されるようになります。</p>
<p>　名前の通り、この設定はスタックのように振舞います。 <code>stack:push</code> で指定する各種のタグそれぞれについて、最後に <code>stack:push</code> した内容が有効であり、 <code>stack:pop</code> すると設定前の状態に戻ります。以下に例を示します。</p>
<pre>
 ここは範囲外です。
 &lt;!-- stack:push p style="color: red;" --&gt;
 ここは赤字になるはず。
 &lt;!-- stack:push p style="background: blue; color: white;" --&gt;
 ここは青地に白い字になるはず。
 &lt;!-- stack:pop p --&gt;
 ここは赤字のはず。
 &lt;!-- stack:pop p --&gt;
 ここも範囲外です。
</pre>
<details>
<summary>◆結果はこちら。</summary>
<p>ここは範囲外です。</p>
<p style="color: red;">ここは赤字になるはず。</p>
<p style="background: blue; color: white;">ここは青地に白い字になるはず。</p>
<p style="color: red;">ここは赤字のはず。</p>
<p>ここも範囲外です。</p>
</details>
<p>　スタイルスタックの効果は、<a href='#f71ZNSHqufB'>フィルタ機能</a>が生成する出力には及びません。また、その他にもスタイルスタックが影響しないタグが存在します。</p>
<h3><a name='hVp0EDLBsmJ'></a>6.5 スタイルパレット</h3>
<p>　<a href='#dOeJnU6OE95'>スタイルスタック</a>は便利なものですが、<a href='#g6xjP526KX7'>テーブル</a>の特定の行やセルにスタイルを設定したい場合には役に立ちません。そのような場合には、 <strong>「スタイルパレット」</strong> が使用できます。これは、以下の要領でスタイルに番号付けをして登録できるものです。</p>
<pre>
 &lt;!-- palette: 0 style="background: #f4f4f4;" --&gt;
 &lt;!-- palette: 1 style="color: red;" --&gt;
</pre>
<p>　<code>&lt;!-- palette:</code>  に続く数字がインデックスで、これには 0 〜 9 までの 10種類が使用できます。それに続けてスタイルなど任意の <a class='term' href='#ahN3t8jbawv'>HTML</a> 属性を記述し、最後に <code>--&gt;</code> で終了します。</p>
<p>　パレットに登録したスタイルを使うには、インデックスを指定します。現状では<a href='#g6xjP526KX7'>テーブル</a>しかスタイルパレットに対応していない<sup><a name='footnote_ref9' href='#footnote9'>9</a></sup>ため、ここではテーブルでの利用方法を説明します。以下に例を示します。</p>
<pre>
  | title | count | price | 
  |:------|------:|------:|
  | foo   |     1 |   666 |
[0| bar   |     2 |1] -99 |
  | baz   |     3 |1]  -8 |
[0| quux  |     4 |   123 |
</pre>
<ul>
<li>行全体にスタイルを適用したい場合、行頭の | の手前に <code>[N</code> を記述</li>
<li>セル単独でスタイルを適用したい場合は、セルを開始する | に続けて <code>N]</code> を記述</li>
</ul>
<p>　上記において、N は適用したいスタイルを登録したパレットのインデックスです。実際に使ってみると、以下のように表示されます。</p>
<table align='center'>
<tr><th>title</th><th>count</th><th>price</th></tr>
<tr><td align='left'>foo</td><td align='right'>1</td><td align='right'>666</td></tr>
<tr style="background: #f4f4f4;"><td align='left'>bar</td><td align='right'>2</td><td style="color: red;" align='right'>-99</td></tr>
<tr><td align='left'>baz</td><td align='right'>3</td><td style="color: red;" align='right'>-8</td></tr>
<tr style="background: #f4f4f4;"><td align='left'>quux</td><td align='right'>4</td><td align='right'>123</td></tr>
</table>
<h3><a name='cjJv49XsD9d'></a>6.6 ページ内へのリンク</h3>
<p>　リンクの書法を拡張することで、ページ内の<a href='#7HkxqP1TWY5'>見出し</a>や<a href='#gg7i7uPfLlo'>図表タイトル</a>へのリンクを作成することができます。</p>
<p>　ページ内の見出しへのリンクを作成する場合、URL 部分を # に続けて見出しの名前にしてください。たとえば、 <code>[目次](#Table of contents)</code> は<a href='#0qJQvVjc3Xy'>目次</a>となります。テキスト部分を省略した場合のルールは標準的な URL リンクと同じですが、<a href='#2M8QFQ2XeBn'>見出しの自動ナンバリング</a>を設定している場合、番号付けされた見出し名がリンクのテキストとなることに注意してください。つまり、 <code>[](#Table of contents)</code> は<a href='#0qJQvVjc3Xy'>1  Table of contents</a>となります。</p>
<p>　図表タイトルへのリンクを作成するには、（ちょっと無様ですが）以下のように F#, T# に続けてタイトルを記述します。それ以外のルールは見出しへのリンクと同じです。</p>
<pre>
  [テキスト](F#図のタイトル)
  [テキスト](T#表のタイトル)
</pre>
<p>　さらに、テキスト部分では <code>$@</code> と <code>$$</code> を使うことができます。これらは、以下のように展開されます。</p>
<ul>
<li><code>$@</code> : 自動ナンバリングによって付与されるプレフィクス</li>
<li><code>$$</code> : 見出しや図表タイトルの文字列</li>
</ul>
<h3><a name='6LkDjrI3ASb'></a>6.7 生の <a class='term' href='#ahN3t8jbawv'>HTML</a> の出力</h3>
<p>　以下のように記述することで、生の <a class='term' href='#ahN3t8jbawv'>HTML</a> をそのまま出力することができます。</p>
<pre>
  &lt;raw_html&gt;
      :
      :
  &lt;/raw_html&gt;
</pre>
<h3><a name='9Dfk88hOKmk'></a>6.8 脚注</h3>
<p>　文章中に脚注を設定し、一箇所にまとめて表示させることができます。開始を示す <code>{{fn:</code> と終了を示す <code>}}</code> は同一の行に記述する必要があることに注意してください。</p>
<pre>
  {{fn:これが脚注の内容です。}}
</pre>
<p>　脚注をまとめて表示するには、脚注を展開したい場所（通常は登場文書の末尾でしょう）に以下の行を記述します。これにより、その場所に文書内のすべての脚注が記載順で一覧されます。</p>
<pre>
  &lt;!-- embed:footnotes --&gt;
</pre>
<p>　このマニュアル文書でも、いくつかの脚注を（サンプルを兼ねて）使用しています。文書末尾を参照してください。</p>
<h3><a name='7maM1Z8DaEp'></a>6.9 目次の生成</h3>
<p>　見出し情報から目次を生成することができます。以下のように記述すると、その場所に階層化されたリストの形式で目次が作成されます。</p>
<pre>
  &lt;!-- embed:toc --&gt;
</pre>
<p>　上記の指定では、見出しレベルの１から６までが全て目次化の対象になります。この対象範囲を絞るには、以下のように記述します。</p>
<pre>
  &lt;!-- embed:toc 2 4 --&gt;
</pre>
<p>　この例では、見出しレベル２〜４までが目次化の対象となります。</p>
<h3><a name='iVFblGs7lu7'></a>6.10 図表一覧の生成</h3>
<p>　目次と同様、図と表の一覧を生成することができます。以下のように記述すると、その場所に図の一覧が作成されます。</p>
<pre>
  &lt;!-- embed:figure-list --&gt;
</pre>
<p>　表の一覧の場合は以下です。</p>
<pre>
  &lt;!-- embed:table-list --&gt;
</pre>
<p>　これによって生成される一覧でも、<a href='#gg7i7uPfLlo'>図表タイトル</a>と同じ設定でナンバリングが行なわれます。詳細は「<a href='#hJJbL4GzVpQ'>7.3  図表のナンバリング単位</a>」を参照してください。</p>
<h3><a name='9rssNl2PzbD'></a>6.11 定義リストへの自動リンク</h3>
<p>　<a href='#9PbJaRizVB7'>定義リスト</a>をつかって用語を定義すると、文章中に登場したその用語は自動的に定義箇所へのリンクになります。このマニュアル文書では、「<a href='#dcPEbaWhYMa'>3  用語</a>」というセクションで（サンプルを兼ねて）いくつかの用語を定義しているので、たとえば <a class='term' href='#b3GXdVHw3CE'>Markdown</a> という用語は自動的にリンクされます。<sup><a name='footnote_ref10' href='#footnote10'>10</a></sup></p>
<p>　この拡張機能に関与する設定として、<a href='#fH3KsaVXKY8'>見出しにおける用語の自動リンク</a>があります。</p>
<h3><a name='f71ZNSHqufB'></a>6.12 フィルタ機能</h3>
<p>　<a href='#2HUs4TZfCPd'>preブロック</a>を開始する行に言語などの名前をつけることでコードハイライトをすることができます。これは turnup では <strong>フィルタ機能</strong> と呼ばれ、コードハイライトに限らずブロックの中身に様々な変換をかける仕組みとして位置付けられています。たとえば、diff の出力に色付けをしたければ以下のように記述します。</p>
<pre>
~~~diff
diff --git a/main.cxx b/main.cxx
index 16fc9f4..8387187 100644
--- a/main.cxx
+++ b/main.cxx
@@ -3,5 +3,5 @@ int main( void ) {
 
-    printf( "hello world.\n" );
+    std::cout &lt;&lt; "hello world." &lt;&lt; std::endl;

    return 0;
~~~
</pre>
<p>　これは以下のように表示されます。</p>
<pre class='diff'>
diff --git a/main.cxx b/main.cxx
index 16fc9f4..8387187 100644
<span class='diff_head'>--- a/main.cxx</span>
<span class='diff_head'>+++ b/main.cxx</span>
<span class='diff_line'>@@ -3,5 +3,5 @@ int main( void ) {</span>
 
<span class='diff_del'>-    printf( "hello world.\n" );</span>
<span class='diff_add'>+    std::cout &lt;&lt; "hello world." &lt;&lt; std::endl;</span>

    return 0;
</pre>
<p>　現在、turnup が提供しているフィルタは以下の通りです。つまり、 <strong>まだちょっとしか実装されていません</strong><sup><a name='footnote_ref11' href='#footnote11'>11</a></sup>。</p>
<ul>
<li>C</li>
<li>C++</li>
<li>diff</li>
<li>sh</li>
</ul>
<p>　しかし、拡張機能として外部プログラムを用いたフィルタリングが可能となっています。詳しくは、<a href='#18dTPnzNOgg'>6.13  外部フィルタの登録</a>を参照してください。また内蔵のフィルタ機能については<a href='#4e69JBVCRLW'>細かい話</a>があります。</p>
<h3><a name='18dTPnzNOgg'></a>6.13 外部フィルタの登録</h3>
<p>　<a href='#2HUs4TZfCPd'>preブロック</a> で指定するフィルタとして、外部プログラムを追加することができます。たとえば、foo というフィルタを指定した場合に quux プログラムを通した結果を表示させたければ以下のように指定します。</p>
<pre>
  &lt;!-- filter:foo = quux %in %out --&gt;
</pre>
<p>　ここで <code>&lt;!-- filter:</code> の直後から <code>=</code> まで（ここでは <code>foo</code> ）がフィルタ名、 <code>=</code> から 最後の <code>--&gt;</code> の手前まで（ここでは <code>quux %in %out</code> ）が実行するフィルタプログラムです。%in と %out は入力ファイル名と出力ファイル名のプレースホルダで、実際に使用されるファイル名は turnnup が都度決定します。</p>
<p>　上記のように定義されていると、turnup はフィルタ名として foo が指定された preブロックを見つけた場合に、以下の要領で処理を行ないます。</p>
<ul>
<li>pre ブロックの中身を一時ファイルに保存する</li>
<li>フィルタプログラムの定義に従い、 <code>quux %in %out</code> を実行する</li>
<ul>
<li>この時、preブロックの中身を保存した一時ファイル名で %in を置き換える</li>
<li>同様に、%out を別の一時ファイル名で置き換える</li>
</ul>
<li>%out に指定した一時ファイルの内容を読み込み、preブロックのフィルタ結果として出力する</li>
</ul>
<p>　外部フィルタは turnup が提供するフィルタ機能よりも優先度が高いことに注意してください。同じ名前のフィルタがある場合、外部フィルタが優先されます。</p>
<h3><a name='hMHXjTrWEnw'></a>6.14 領域の折り畳み</h3>
<p>　以下のように 2 つのコメントで囲まれた部分は、折り畳み可能な領域になります。その最初の行は常に表示されるタイトルで、クリックするたびに表示状態を切り替えることができます。２行目以降は折り畳まれる部分です。</p>
<pre>
  &lt;!-- collapse:begin --&gt;
  TITLE_LINE
      :
      : (contents)
      :
  &lt;!-- collapse:end --&gt;
</pre>
<p>　　</p>
<p>　以下に例を示します。以下のように記述すると、</p>
<pre>
&lt;!-- collapse:begin --&gt;
タイトル行は@{{color: red;}{文字修飾}}可能。 __クリック__ するたびに状態をトグルできます。
２行目以降は折り畳まれる中身です。通常通り、様々な記述をすることができます。

* contents1
* contents2
* contents3

&lt;!-- collapse:end --&gt;
</pre>
<p>　以下のように表示されます。あと、<a href='#4e69JBVCRLW'>細かい話</a>にも注意事項が書いてありますので参照してください。</p>
<details>
<summary>タイトル行は<span style='color: red;'>文字修飾</span>可能。 <strong>クリック</strong> するたびに状態をトグルできます。</summary>
<p>２行目以降は折り畳まれる中身です。通常通り、様々な記述をすることができます。</p>
<ul>
<li>contents1</li>
<li>contents2</li>
<li>contents3</li>
</ul>
</details>
<h3><a name='a2FYBDWqZUA'></a>6.15 別ファイルの include</h3>
<p>　長大な文書を作成するような場合、章毎にデータファイルを分割したくなるかもしれません。あるいは、サンプルコードを別ファイルにしておき、実際に動作することをいつでも確認できるようにしておきたいかもしれません。理由はさておき、他のファイルの内容を取り込みたい場合には以下のようにすることができます。</p>
<!-- start raw html -->
<pre>
&lt;!-- include: EXTERNAL_FILE --&gt;
</pre>
<!-- end raw html -->
<p>　こうしておくと、 <code>EXTERNAL_FILE</code> で指定されたファイルの内容がそこに書いてあったかのように展開されます。この展開はファイルの読み込み時点で実行されるため、<a href='#2HUs4TZfCPd'>preブロック</a>や<a href='#6LkDjrI3ASb'>raw_html ブロック</a> の内部に書くことだってできます。つまり、サンプルコードの中身を内部フィルタでコードハイライトさせたければ、以下のようにできるということです。</p>
<!-- start raw html -->
<pre>
```C
&lt;!-- include: sample.01.c --&gt;
```
</pre>
<!-- end raw html -->
<p>　include されるファイルの中で、さらに別のファイルを include することもできます。ただし、相互に（あるいは循環的に）include しあうようなファイルを処理することはできません。また、（当たり前ですが）存在しないファイルを指定するとエラーになります。</p>
<p>　include は便利な機能ですが、ひとつ残念な制約があります。include は<a href='#9IN7afRR0hr'>プリプロセス</a>よりも先に実行されるため、 <strong>ファイル名を格納した変数を include のパラメータ部分で展開することはできません。</strong></p>
<h3><a name='hs1guSfsFGb'></a>6.16 改ページ指定</h3>
<p>　以下のコメントを記述することで、印刷時にその位置で改ページをすることができます。<sup><a name='footnote_ref12' href='#footnote12'>12</a></sup></p>
<pre>
&lt;!-- embed:pagebreak --&gt;
</pre>
<h3><a name='4eSrElLWBcH'></a>6.17 変数の定義と展開</h3>
<h4><a name='2yDQLphjQX0'></a>6.17.1 データ内での設定と展開</h4>
<p>　変数に値を設定し、任意の場所でその値を展開することができます。変数の定義は以下の要領で記述します。ここでは、変数 FOO に値として 777 を設定しています。</p>
<pre>
&lt;!-- define: FOO = 777 --&gt;
</pre>
<p>　<a class='term' href='#8sf6EgPf8j8'>空白類文字</a>を（特に値の前後端に）含む値を変数に設定したい場合、以下のように値にシングルクォートまたはダブルクォートで括ることができます（この場合クォート文字は値に含まれません）。</p>
<pre>
&lt;!-- define: VAR = ' a b c ' --&gt;
</pre>
<p>　変数名に使用できる文字は英大小文字、数字、およびアンダースコアのみです。また、アンダースコアで始まる名前はシステム用に予約されています。アンダースコアで始まる名前を使用してもエラーにはなりませんが、結果は未定義です。</p>
<p>　設定した変数を参照（展開）するには ${FOO} という要領で指定します。この変数展開は<a href='#9IN7afRR0hr'>プリプロセス段階</a>で実行されるため、バッククォートで括られた<a href='#2TegSYAerqJ'>コード</a>の内部でも展開されます。</p>
<h4><a name='kW5fA3S8XIj'></a>6.17.2 起動オプションでの変数設定</h4>
<p>　変数は起動オプションでも定義することができます。以下のように <code>-DNAME=VALUE</code> の形式で指定してください。</p>
<pre>
turnup -DFOO=777  DATA.md &gt; OUTPUT.htm
</pre>
<p>　この場合、<a class='term' href='#8sf6EgPf8j8'>空白類文字</a>を含めたい場合は以下のようにします。</p>
<pre>
turnup '-DVAR= a b c '  DATA.md &gt; OUTPUT.htm
</pre>
<h4><a name='9Z7pya1EZOR'></a>6.17.3 システム変数</h4>
<p>　システム変数は turnup によって自動的に設定される変数です。以下が用意されています。</p>
<table align='center'>
<tr><th>name</th><th>description</th></tr>
<tr><td align='left'><code>__APP_NAME</code></td><td align='left'>起動された turnup のプログラム名（パスは取り除かれます）</td></tr>
<tr><td align='left'><code>__APP_VERSION</code></td><td align='left'>turnup のバージョン番号（ <code>0.000</code> 形式）</td></tr>
<tr><td align='left'><code>__FILE</code></td><td align='left'>turnup 起動時に指定した入力ファイル名（パスは取り除かれます）</td></tr>
<tr><td align='left'><code>__DATE</code></td><td align='left'>turnup を実行した日付（ <code>YYYY/MM/DD</code> 形式）</td></tr>
<tr><td align='left'><code>__TIME</code></td><td align='left'>turnup を実行した時刻（ <code>HH:MM:DD</code> 形式）</td></tr>
</table>
<h3><a name='8sNFPrNb9kM'></a>6.18 条件分岐</h3>
<p>　簡単な論理式を使用した条件分岐ができます。以下のように、コメントを利用して <code>if, elif, else, endif</code> を記述することができます。 <code>elif, else</code> についてはオプションです。 <code>EXPRESSION</code> で与える条件式が成立した部分だけが出力されます。</p>
<!-- start raw html -->
<pre>
&lt!-- if: EXPRESSION --&gt
      :
      :
&lt!-- elif: EXPRESSION --&gt
      :
      :
&lt!-- else --&gt
      :
      :
&lt!-- endif --&gt
</pre>
<!-- end raw html -->
<p>　<code>EXPRESSION</code> で指定する条件式は最大で 4 要素からなる以下のパターンになります。</p>
<table align='center'>
<tr><th>count</th><th>pattern</th><th>description</th></tr>
<tr><td align='center'>0</td><td align='left'></td><td align='left'>常に偽に評価されます</td></tr>
<tr><td align='center'>1</td><td align='left'><code>PARAM</code></td><td align='left'>文字列 <code>PARAM</code> の長さが 1 以上か否か</td></tr>
<tr><td align='center'>2</td><td align='left'><code>! PARAM</code></td><td align='left'>1つめが ! なら上記の否定</td></tr>
<tr><td align='center'>2</td><td align='left'><code>-op PARAM</code></td><td align='left'>1つめが ! 以外なら先頭が演算子</td></tr>
<tr><td align='center'>3</td><td align='left'><code>! -op PARAM</code></td><td align='left'>1つめが ! なら上記の否定</td></tr>
<tr><td align='center'>3</td><td align='left'><code>PARAM1 -op PARAM2</code></td><td align='left'>1つめが ! 以外なら 2 つめが演算子</td></tr>
<tr><td align='center'>4</td><td align='left'><code>! PARAM1 -op PARAM2</code></td><td align='left'>1つめが ! なら上記の否定（それ以外はエラー）</td></tr>
</table>
<p>　具体的なパターンは以下の通りです。</p>
<table align='center'>
<tr><th>expression</th><th>description</th></tr>
<tr><td nowrap align='left'><code>! EXPRSSION</code></td><td align='left'>条件式 <code>EXPRSSION</code> の否定</td></tr>
<tr><td nowrap align='left'><code>STRING</code></td><td align='left'><code>-n STRING</code> と同様</td></tr>
<tr><td nowrap align='left'><code>-n STRING</code></td><td align='left'>文字列 <code>STRING</code> の長さが 0 より大きいか否か</td></tr>
<tr><td nowrap align='left'><code>-z STRING</code></td><td align='left'>文字列 <code>STRING</code> の長さが 0 か否か</td></tr>
<tr><td nowrap align='left'><code>STRING1 == STRING2</code></td><td align='left'>2つの文字列が等しいか否か</td></tr>
<tr><td nowrap align='left'><code>STRING1 != STRING2</code></td><td align='left'>2つの文字列が等しくないか否か</td></tr>
<tr><td nowrap align='left'><code>INTEGER1 -eq INTEGER2</code></td><td align='left'>2つの整数値として比較して等しいか否か</td></tr>
<tr><td nowrap align='left'><code>INTEGER1 -ne INTEGER2</code></td><td align='left'>2つの整数値として比較して等しくないか否か</td></tr>
<tr><td nowrap align='left'><code>INTEGER1 -ge INTEGER2</code></td><td align='left'>2つの整数値として比較して <code>INTEGER1 &gt;= INTEGER2</code> か否か</td></tr>
<tr><td nowrap align='left'><code>INTEGER1 -gt INTEGER2</code></td><td align='left'>2つの整数値として比較して <code>INTEGER1 &gt; INTEGER2</code> か否か</td></tr>
<tr><td nowrap align='left'><code>INTEGER1 -le INTEGER2</code></td><td align='left'>2つの整数値として比較して <code>INTEGER1 &lt;= INTEGER2</code> か否か</td></tr>
<tr><td nowrap align='left'><code>INTEGER1 -lt INTEGER2</code></td><td align='left'>2つの整数値として比較して <code>INTEGER1 &lt; INTEGER2</code> か否か</td></tr>
<tr><td nowrap align='left'><code>FILE1 -nt FILE2</code></td><td align='left'>2つのファイルの更新日付で比較して <code>FILE1</code> の方が新しいか否か</td></tr>
<tr><td nowrap align='left'><code>FILE1 -ot FILE2</code></td><td align='left'>2つのファイルの更新日付で比較して <code>FILE1</code> の方が古いか否か</td></tr>
<tr><td nowrap align='left'><code>-d FILE</code></td><td align='left'><code>FILE</code> がディレクトリとして存在するか否か</td></tr>
<tr><td nowrap align='left'><code>-e FILE</code></td><td align='left'><code>FILE</code> が存在するか否か</td></tr>
<tr><td nowrap align='left'><code>-f FILE</code></td><td align='left'><code>FILE</code> がファイルとして存在するか否か</td></tr>
<tr><td nowrap align='left'><code>-s FILE</code></td><td align='left'><code>FILE</code> がサイズが 0 でないファイルとして存在するか否か</td></tr>
</table>
<h3><a name='bs9N19eIT7w'></a>6.19 エラーと警告の出力</h3>
<p>　変数の状態など、特定の状況化ではエラーや警告を出力したい場合があるかもしれません。そのような目的には <code>error</code> および <code>warning</code> が使用できます。</p>
<p>　サンプルを以下に示します。以下の例では、条件式 <code>CONDITION</code> が成立しなかった場合、エラーとしています。</p>
<!-- start raw html -->
<pre>
&lt!-- if: ! CONDITION --&gt
    &lt!-- error: CONDITION is not true --&gt
&lt!-- endif --&gt
</pre>
<!-- end raw html -->
<p>　これによって出力されるエラーメッセージは以下のようなものです。類似のメッセージは標準エラー出力にも書き出されます。</p>
<!-- start raw html -->
<p><span style='background:pink; color:red;'>ERROR : CONDITION is not true</span></p>
<!-- end raw html -->
<p>　<code>error</code> と <code>warning</code> はともに上記のようなメッセージを出力しますが、 <code>error</code> は文書の生成プロセス全体を中止するのに対し、 <code>warning</code> は処理を続行する点が異なります。</p>
<p>　　</p>
<h2><a name='cNngUDCfTMJ'></a>7 設定</h2>
<h3><a name='fH3KsaVXKY8'></a>7.1 見出しにおける用語の自動リンク</h3>
<p>　<a href='#9rssNl2PzbD'>定義リストへの自動リンク</a>機能は、デフォルトでは見出し文字列（正確には<a href='#7HkxqP1TWY5'>見出し</a>および<a href='#gg7i7uPfLlo'>図と表のタイトル</a>）には適用されません。これは見出し内にリンクを生成するとうるさくなることや、見出しに存在する文字列は通常そのセクションの本文にも存在することが理由です。</p>
<p>　この挙動を変えたい場合、以下の行を文書内に記載してください。見出し文字列内でも用語の自動リンクが行なわれるようになります。</p>
<pre>
  &lt;!-- config:term-link-in-header --&gt;			
</pre>
<h3><a name='2M8QFQ2XeBn'></a>7.2 見出しの自動ナンバリング</h3>
<p>　見出しに自動的に番号付けを行なうことができます。この機能を有効化するには、以下の設定を文書内に記載します。</p>
<pre>
  &lt;!-- config:header-numbering --&gt;			
</pre>
<p>　これにより、1.1.1. 形式で見出しに自動的に番号が付与されます<sup><a name='footnote_ref13' href='#footnote13'>13</a></sup>。この番号を付与する見出しのレベルを限定したい場合、以下のように記載します。この例では、見出しレベル２〜４の合計３レベルで採番されます。この場合、見出しレベル1、および 5 以降には番号付けは適用されません。</p>
<pre>
  &lt;!-- config:header-numbering 2 4 --&gt;			
</pre>
<h3><a name='hJJbL4GzVpQ'></a>7.3 図表のナンバリング単位</h3>
<p>　<a href='#gg7i7uPfLlo'>図表タイトル</a>、および<a href='#iVFblGs7lu7'>図表一覧生成</a>に適用される番号付けの規則を設定することができます。これには、以下のように記述します。この設定を省略した場合のデフォルト値は 0 です。</p>
<pre>
  &lt;!-- config:entity-numbering-depth 1 --&gt;
</pre>
<p>　0 が指定された場合、図と表それぞれについて、文書全体を通して 1 から始まる連番が付与されます。つまり、図であれば Figure.1 xxxxx、Figure.2 yyyyy といった要領です（表の場合は Table.1 zzzzz）となります。</p>
<p>　1 以上を指定した場合、「<a href='#2M8QFQ2XeBn'>7.2  見出しの自動ナンバリング</a>」で指定した番号付け対象の見出しのうち、先頭から指定した数のレベルを単位として 1 から始まる番号付けを行ないます。こう書くとわかりにくいですが、たとえば以下のようにした場合、</p>
<pre>
  &lt;!-- config:header-numbering 2 4 --&gt;			
  &lt;!-- config:entity-numbering-depth 2 --&gt;
</pre>
<p>まず、ナンバリングをする見出しはレベル 2,3,4 です。そして、図表については見出しレベルの 2,3 が一致するものについて 1 から連番で番号付けをし、これらの見出しレベルが変化するとまた 1 からナンバリングが始まります。なお、この場合は図であれば Figure.1.2-1 xxxxxx といった書式になります。</p>
<h3><a name='jkzhEyZU0ts'></a>7.4 スタイルシートの埋め込み</h3>
<p>　<a href='#kyMp8IkRK8n'>スタイルシートの指定</a>は、デフォルトではスタイルシートの参照が出力されるだけですが、以下の設定が文書内に記述されていると、出力 <a class='term' href='#ahN3t8jbawv'>HTML</a> の内部にスタイルシートの内容を埋め込むようになります。</p>
<pre>
  &lt;!-- config:embed-stylesheet --&gt;			
</pre>
<p>　これによって、以下のように埋め込みが行なわれます。</p>
<pre>
&lt;html&gt;
&lt;header&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"&gt;
    &lt;meta http-equiv="Content-Style-Type" content="text/css"&gt;
    &lt;title&gt;document title&lt;/title&gt;
  &lt;style&gt;
  &lt;!--
    :
    :
  --&gt;
  &lt;/style&gt;
&lt;/header&gt;
</pre>
<p>　この設定を有効にしてスタイルシートの埋め込みを行なう場合、turnup の実行時点で指定されたスタイルシートのファイルが存在していなければなりません（当たり前ですが）。</p>
<h3><a name='8a3vnTcmVrk'></a>7.5 コメントの出力</h3>
<p>　<a href='#cPmXTXvPhJd'>コメント</a>は記述しても <a class='term' href='#ahN3t8jbawv'>HTML</a> には出力されませんが、以下の設定を文書内に記述することで、この挙動を変えることができます。具体的には、<a class='term' href='#ahN3t8jbawv'>HTML</a> スタイルのコメントをそのまま出力するようになります。<sup><a name='footnote_ref14' href='#footnote14'>14</a></sup></p>
<pre>
  &lt;!-- config:write-comment --&gt;			
</pre>
<p>　　</p>
<h2><a name='4e69JBVCRLW'></a>8 細かい話</h2>
<h3><a name='fSSOiFwQpEj'></a>8.1 入力ファイルのエンコーディングと改行スタイル</h3>
<p>　入力となる <a class='term' href='#b3GXdVHw3CE'>Markdown</a> ファイルのエンコーディングは utf-8 のみですが、改行コードは Lf のみでも CrLf でも動作します。ただし、Lf の方がほんの少し高速になります。</p>
<h3><a name='9s47bTtYstx'></a>8.2 文字装飾やリンクの制約と継続行</h3>
<p>　リスト要素や文章中に記述できる各種の装飾、リンクなどは、行を跨ぐことはできないので注意してください。単一の行に記述しなければならない記法を複数行に跨がらせたい場合、行末にスペース、バックスラッシュを順に記述することにより行の継続をさせることができます。</p>
<h3><a name='9IN7afRR0hr'></a>8.3 内部的な処理順序</h3>
<p>　turnup に様々な機能が追加された結果、当初は 1-pass だった内部処理も複雑になっていきました。現在では、以下の内部ステップを実行しています。</p>
<table align='center'>
<tr><th>step</th><th>action</th><th>description</th></tr>
<tr><td align='center'>1</td><td nowrap align='left'>入力データのロード</td><td align='left'>指定された入力ファイルとその中の include 指令を再帰的に処理し、単一の行シーケンスを生成します。また、この時点で改行コードの統一や継続行の処理を済ませてしまいます。</td></tr>
<tr><td align='center'>2</td><td nowrap align='left'>プリプロセス</td><td align='left'>入力データの行シーケンスを反復し、変数定義の追跡、および変数展開を実施します。また、条件分岐の処理もこの時点で実施します。</td></tr>
<tr><td align='center'>3</td><td nowrap align='left'>予備スキャン</td><td align='left'>変数展開済みの行シーケンスを反復し、見出しや図表タイトル、用語定義などを解析して各種の拡張機能の利用に備えます。</td></tr>
<tr><td align='center'>4</td><td nowrap align='left'>出力生成</td><td align='left'>行シーケンスを反復し、出力 <a class='term' href='#ahN3t8jbawv'>HTML</a> を生成します。</td></tr>
</table>
<h3><a name='6lxsyJvfG4q'></a>8.4 一部の文字装飾における制約</h3>
<p>　以下の文字装飾において対象範囲を括る（**などの文字列の）ペアのすぐ外側には、 <strong>「<a class='term' href='#8sf6EgPf8j8'>空白類文字</a>でない文字があってはいけません」</strong> 。また、ペアのすぐ内側には <strong>「<a class='term' href='#8sf6EgPf8j8'>空白類文字</a>があってはいけません」</strong> 。</p>
<ul>
<li><a href='#d2FXT7Fqg21'>強調</a></li>
<li><a href='#hBdBkqlaJVW'>取消し線</a></li>
<li><a href='#9k1sm8QrDHi'>マーカー</a></li>
<li><a href='#2TegSYAerqJ'>コード</a></li>
</ul>
<h3><a name='l3wNcsiymoY'></a>8.5 フィルタ機能について</h3>
<p>　turnup が標準で提供する<a href='#f71ZNSHqufB'>フィルタ機能</a>は簡易的なもので、せいぜいコメントと文字列リテラルなどを優先して処理し、あとはキーワードをハイライトする程度です。構文解析などを伴うリッチなコードハイライトが必要な場合、<a href='#18dTPnzNOgg'>外部フィルタの利用</a>を検討してください。</p>
<h3><a name='8pNcG5W73uy'></a>8.6 領域の折り畳みについて</h3>
<p>　<a href='#hMHXjTrWEnw'>領域の折り畳み</a>を可能にする拡張は、スクリプトを使わず、&lt;details&gt; タグを使って実現しています。ひょっとしたら、古いブラウザでは動作しないかもしれません。あと、折り畳まれる対象の中で<a href='#9Dfk88hOKmk'>脚注</a>を使った場合、畳まれた状態では脚注からのリンクをクリックしてもジャンプしないことがわかっていますので注意してください。</p>
<p>　　</p>
<h2><a name='8tTIqHSNoTg'></a>9 既知の問題点</h2>
<h3><a name='95miNJcW6DM'></a>9.1 【解決済】リンクテキストの末尾に文字装飾があると正しく処理されない</h3>
<details>
<summary>　この問題は 2021/09/12 に修正されました（まだバージョン番号の管理を始めていないので日付で記載しています）。</summary>
<p>　リンクテキストの末尾に文字装飾があると正しく処理されない問題が確認されています。たとえば、<code>[Table of __contents__](#Table of contents)</code> は <code>Table of __contents__</code> と表示されてしまいます。</p>
<p>　<strike>内部実装に問題があることが確認できていますが、修正が少々面倒なため着手できてません。</strike></p>
</details>
<p>　　</p>
<h3><a name='kjPiZRKvp7P'></a>9.2 【解決済】テーブルで colspan/rowspan を使うとアライメント指定がずれる</h3>
<details>
<summary>アライメント指定行を任意の位置に複数記述可能とすることでユーザーデータでの対処を可能にする修正を行ないました。詳細は<a href='#g6xjP526KX7'>テーブル</a>の説明を参照してください。</summary>
<p>　<a href='#g6xjP526KX7'>テーブル</a>において列毎のアライメント指定と横／縦方向のセル結合を併用すると意図したようにアライメントが設定されない問題があります。これは、セルの処理においてセル結合の情報を考慮に入れていないために発生します。たとえば、以下の例では水平方向の結合によってそれよりも右側のセルで問題が生じています。</p>
<pre>
| column A | column B | column C |
|:---------|:--------:|---------:|
|left      |center    |right     |
|2&gt; left              |right?    |
|left      |center    |right     |
</pre>
<table align='center'>
<tr><th>column A</th><th>column B</th><th>column C</th></tr>
<tr><td align='left'>left</td><td align='center'>center</td><td align='right'>right</td></tr>
<tr><td align='left' colspan='2'>left</td><td style="background: #fff0f0;" align='center'>right?</td></tr>
<tr><td align='left'>left</td><td align='center'>center</td><td align='right'>right</td></tr>
</table>
<p>　上記のような例では、問題は行に閉じているため対処は簡単だと思うかもしれません。しかし、縦方向の結合では先行する行の影響を受けることがわかります。</p>
<pre>
| column A | column B | column C |
|:---------|:--------:|---------:|
|2^ left   |center    |right     |
           |center?   |right?    |
|left      |center    |right     |
</pre>
<table align='center'>
<tr><th>column A</th><th>column B</th><th>column C</th></tr>
<tr><td align='left' rowspan='2'>left</td><td align='center'>center</td><td align='right'>right</td></tr>
<tr><td style="background: #fff0f0;" align='left'>center?</td><td style="background: #fff0f0;" align='center'>right?</td></tr>
<tr><td align='left'>left</td><td align='center'>center</td><td align='right'>right</td></tr>
</table>
<p>　さらに、これらのセル結合指定が複合した場合、プログラムとして正し処理を行なうのは難しくなります。この問題に対する対処は未定ですが、コードで頑張ることは避け、アライメント指定行を任意の位置に複数記述可能とすることでユーザーデータでの対処を可能にする方向で検討中です。</p>
</details>
<h3><a name='78o6GpB2DHz'></a>9.3 【解決済】条件分岐でファイル存在チェックをしても include がエラーになる</h3>
<details>
<summary>　この問題は version 0.804 で修正されました。</summary>
<p>　<a href='#9IN7afRR0hr'>内部的な処理順序</a> で説明している通り、<a href='#a2FYBDWqZUA'>別ファイルの include</a>はプリプロセスに先行して実施されます。そのため、以下のように「ファイルが存在した場合だけ include する」という意図で書かれた以下のコードは期待される動作をしませんでした（入力データのロード時点でエラー終了してしまいます）。</p>
<!-- start raw html -->
<pre>
&lt!-- if: -f foo.txt --&gt
  &lt!-- include: foo.txt --&gt
&lt!-- endif --&gt
</pre>
<!-- end raw html -->
<p>　この問題を解決するために、include の際のエラー出力方式変更を実施しました。具体的には、入力データのロード時点ではエラー終了とせず、include 箇所に <a href='#bs9N19eIT7w'>errorディレクティブ</a>を埋め込むようにしました。これにより、エラー処理が出力生成段階まで遅延されることになり、条件分岐で適切に括られていれば意図した動作をする（エラーが回避できる）ことになります。</p>
</details>
<p>　　</p>
<h2><a name='dGdSPnvay5N'></a>10 更新履歴</h2>
<p>　更新履歴です。2021/09/26 以降バージョン番号の付与を開始しました。</p>
<ul>
<li><strong>2021/07/23</strong></li>
<ul>
<li>ENHANCE : <a href='#18dTPnzNOgg'>外部フィルタ</a>機構の導入</li>
<li>REFACTORING : 内部的な修正</li>
</ul>
<li><strong>2021/07/27</strong></li>
<ul>
<li>BUGFIX : <a href='#18dTPnzNOgg'>外部フィルタ</a>を使用する場合の一時ファイル保存にまつわるバグを修正</li>
<li>ENHANCE : <a href='#gg7i7uPfLlo'>図表タイトル</a>の記法と一覧作成機能の実装</li>
</ul>
<li><strong>2021/07/28</strong></li>
<ul>
<li>ENHANCE : <a href='#9Dfk88hOKmk'>脚注</a>に専用の class を用意</li>
<li>ENHANCE : <a href='#cjJv49XsD9d'>ページ内アンカーへのリンク</a>に省略記法を用意</li>
</ul>
<li><strong>2021/07/29</strong></li>
<ul>
<li>BUGFIX : 単独の ! が [ に化ける凡ミスを修正</li>
</ul>
<li><strong>2021/08/12</strong></li>
<ul>
<li>ENHANCE : <a href='#f71ZNSHqufB'>diff のハイライト</a>を内部フィルタとして実装</li>
</ul>
<li><strong>2021/08/15</strong></li>
<ul>
<li>ENHANCE : <a href='#f71ZNSHqufB'>C/C++ のコードハイライト</a>を内部フィルタとして実装</li>
</ul>
<li><strong>2021/08/16</strong></li>
<ul>
<li>BUGFIX : <a href='#f71ZNSHqufB'>コードハイライト</a>対象冒頭にキーワードがあると処理されない問題の修正</li>
<li>BUGFIX : <a href='#g6xjP526KX7'>テーブル</a>ヘッダ行にも align が出力される問題の修正</li>
<li>CSS : table header の背景色スタイルを変更</li>
<li>ENHANCE : <a href='#hs1guSfsFGb'>改ページ指定</a>の機能を追加</li>
</ul>
<li><strong>2021/08/17</strong></li>
<ul>
<li>ENHANCE : <a href='#g6xjP526KX7'>テーブル</a>と<a href='#hpQu1WK1Nkr'>画像</a>は常にセンタリングされるように変更（暫定対処になるかも）</li>
<li>ENHANCE : <a href='#akoPHkUM3jR'>改行の挿入</a>をサポート</li>
<li>ENHANCE : <a href='#9PbJaRizVB7'>定義リスト</a>において用語の前後のスペースの扱いを緩和し、明確化</li>
<li>ENHANCE : <a href='#2Hh9eF0BTk3'>インラインスタイル指定</a>のサポートを追加</li>
<li>ENHANCE : <a href='#g6xjP526KX7'>テーブル</a>で nowrap を指定させる拡張を追加</li>
<li>ENHANCE : <a href='#hMHXjTrWEnw'>領域の折り畳み</a>を可能にする拡張を追加</li>
</ul>
<li><strong>2021/08/18</strong></li>
<ul>
<li>BUGFIX : リンクラベル内部に定義用語があるとリンクがネストする問題の修正</li>
<li>ENHANCE : 空行に加えてコメント行も段落の終了とみなすように変更</li>
<li>BUGFIX : 各種タイトル（見出し、テーブル、ヘッダ）、および用語が同名でも異なるリンク用ハッシュコードを生成するように修正</li>
</ul>
<li><strong>2021/08/19</strong></li>
<ul>
<li>ENHANCE : <a href='#dOeJnU6OE95'>スタイルスタック</a>拡張を追加</li>
</ul>
<li><strong>2021/08/20</strong></li>
<ul>
<li>BUGFIX : 直前のテーブルの nowrap 指定が次のテーブルのヘッダに適用されてしまう問題の修正</li>
</ul>
<li><strong>2021/08/22</strong></li>
<ul>
<li>ENHANCE : 名前の衝突をチェックしてエラーを出力するように変更</li>
<li>ENHANCE : <a href='#hMHXjTrWEnw'>領域の折り畳み</a>における用語自動リンクに関するバグを修正</li>
<li>ENHANCE : スペース＋バックスラッシュを使用した継続行の機能を追加</li>
</ul>
<li><strong>2021/08/25</strong></li>
<ul>
<li>ENHANCE : <a href='#hVp0EDLBsmJ'>スタイルパレット</a>拡張を追加</li>
<li>ENHANCE : <a href='#g6xjP526KX7'>テーブル</a>におけるヘッダ／データ境界行の扱いを拡張（複数行ヘッダを許可）</li>
<li>ENHANCE : <a href='#g6xjP526KX7'>テーブル</a>における colspan 指定の拡張を追加</li>
</ul>
<li><strong>2021/08/31</strong></li>
<ul>
<li>BUGFIX : <a href='#d2FXT7Fqg21'>強調</a>、<a href='#hBdBkqlaJVW'>取消し線</a>、<a href='#9k1sm8QrDHi'>マーカー</a>、<a href='#2TegSYAerqJ'>コード</a> の<a href='#6lxsyJvfG4q'>適用条件を変更</a></li>
<li>BUGFIX : <a href='#7maM1Z8DaEp'>目次</a>と<a href='#iVFblGs7lu7'>図表一覧</a>、および<a href='#7HkxqP1TWY5'>見出し</a>や<a href='#gg7i7uPfLlo'>図表タイトル</a>へのリンクにおいて文字装飾が正しく処理されない問題を修正</li>
</ul>
<li><strong>2021/09/04</strong></li>
<ul>
<li>BUGFIX : <a href='#7HkxqP1TWY5'>見出し</a>や<a href='#gg7i7uPfLlo'>図表タイトル</a>の末尾に<a class='term' href='#8sf6EgPf8j8'>空白類文字</a>があると出力にゴミが混じる問題を修正</li>
<li>ENHANCE : <a href='#g6xjP526KX7'>テーブル</a>における rowspan 指定の拡張を追加</li>
<li>REFACTORING : 内部実装を整理</li>
<li>ENHANCE : <a href='#a2FYBDWqZUA'>別ファイルの include</a> をサポートする拡張を追加</li>
<li>BUGFIX : <a href='#jkzhEyZU0ts'>スタイルシートの埋め込み</a>設定時に指定 css ファイルが存在しないとクラッシュする問題を修正</li>
</ul>
<li><strong>2021/09/11</strong></li>
<ul>
<li>BUGFIX : <a href='#kjPiZRKvp7P'>テーブルで colspan/rowspan を使うとアライメント指定がずれる問題</a>に対処する機能を追加</li>
</ul>
<li><strong>2021/09/12</strong></li>
<ul>
<li>BUGFIX : <a href='#95miNJcW6DM'>リンクテキストの末尾に文字装飾があると正しく処理されない問題</a>を修正</li>
<li>ENHANCE : <a href='#f71ZNSHqufB'>シェルスクリプトのコードハイライト</a>を内部フィルタとして実装 ( experimental )</li>
</ul>
<li><strong>2021/09/21</strong></li>
<ul>
<li>ENHANCE : <code>@((STYLES)(CONTENTS))</code> 形式での<a href='#2Hh9eF0BTk3'>インラインスタイル指定</a>を可能にする修正</li>
</ul>
<li><strong>2021/09/25</strong></li>
<ul>
<li>ENHANCE : <a href='#4eSrElLWBcH'>変数の定義と展開</a>機能を追加</li>
</ul>
<li><strong>2021/09/26 - version 0.800</strong></li>
<ul>
<li>ENHANCE : バージョン番号の付与を開始</li>
<li>ENHANCE : 起動オプション --version でバージョン情報を表示</li>
</ul>
<li><strong>2021/10/03 - version 0.801</strong></li>
<ul>
<li>ENHANCE : 起動オプション <code>-DSYMBOL=VALUE</code> での<a href='#4eSrElLWBcH'>変数定義</a>サポートの追加</li>
</ul>
<li><strong>2021/10/11 - version 0.802</strong></li>
<ul>
<li>ENHANCE : <a href='#9Z7pya1EZOR'>システム変数</a>を追加</li>
<li>ENHANCE : <a href='#8sNFPrNb9kM'>条件分岐</a>機能を追加</li>
</ul>
<li><strong>2021/10/12 - version 0.803</strong></li>
<ul>
<li>BUGFIX : <a href='#8sNFPrNb9kM'>条件分岐</a>機能における <code>elif</code> で変数展開されない問題を修正</li>
<li>ENHANCE : <a href='#bs9N19eIT7w'>エラーと警告の出力</a>機能を追加</li>
</ul>
<li><strong>2021/10/14 - version 0.804</strong></li>
<ul>
<li>BUGFIX : <a href='#78o6GpB2DHz'>条件分岐と include に関する問題</a>を修正</li>
</ul>
<li><strong>2021/10/?? - version 0.805</strong></li>
<ul>
<li>REFACTORING : 内部実装を整理（実行時文字列作成機能を集約）</li>
</ul>
</ul>
<hr>
<p class='footnote'><a name='footnote1' href='#footnote_ref1'>1</a> : turnupという名前は、mark down を mark up にひっくり返す(turn upする)という意味で付けられました。</p>
<p class='footnote'><a name='footnote2' href='#footnote_ref2'>2</a> :  <code>GitHub Flavored Markdown</code> とか色々あるみたいで、何が標準なのか良くわかりませんが。</p>
<p class='footnote'><a name='footnote3' href='#footnote_ref3'>3</a> : スペースまたはタブで始まる行を pre ブロックとする仕様は採用していません</p>
<p class='footnote'><a name='footnote4' href='#footnote_ref4'>4</a> : = と - を混在させた場合、従来通り nowrap ではないものとみなされます。</p>
<p class='footnote'><a name='footnote5' href='#footnote_ref5'>5</a> : <a href='#hVp0EDLBsmJ'>スタイルパレット</a> の指定も含め、複数の指定を同時にする場合、 <code>|N]M&gt;U^</code> の順序で指定してください。</p>
<p class='footnote'><a name='footnote6' href='#footnote_ref6'>6</a> : 現在の実装では &gt; は行頭から始める必要があり、また複数の &gt; の間に空白を入れることはできません。これは課題として将来修正される可能性があります。</p>
<p class='footnote'><a name='footnote7' href='#footnote_ref7'>7</a> : <a class='term' href='#fgvQnqibuC4'>GFM</a> だと URL を単純に書いただけでもリンクになるようですが、そこまではしてません。</p>
<p class='footnote'><a name='footnote8' href='#footnote_ref8'>8</a> :  <code>@((STYLES)(CONTENTS))</code> 形式は、脚注の中での使用を可能にするために追加されました</p>
<p class='footnote'><a name='footnote9' href='#footnote_ref9'>9</a> : テーブル以外でパレットが必要な書法は無いような気がしています。ひょっとしたら、リストでやるかもしれません。</p>
<p class='footnote'><a name='footnote10' href='#footnote_ref10'>10</a> : この自動リンクにおいて、大文字小文字が異なる表記は対象になりません。この挙動を変更するオプションは今のところ、ありません。</p>
<p class='footnote'><a name='footnote11' href='#footnote_ref11'>11</a> : C/C++ のコードハイライト実装で基本的な仕組みはできているので、必要に応じて他も実装する予定です。</p>
<p class='footnote'><a name='footnote12' href='#footnote_ref12'>12</a> : 実際には、これは <code>&lt;p class='pagebreak'&gt;&lt;/p&gt;</code> という一行を出力 <a class='term' href='#ahN3t8jbawv'>HTML</a> に書き出すだけで、これが改ページとして機能するのは、CSS の設定によるものです。詳細は同梱の default.css に含まれる <code>p.pagebreak</code> という CSS エントリを参照してください。</p>
<p class='footnote'><a name='footnote13' href='#footnote_ref13'>13</a> : 番号付けの書式は今のところこれだけで、選択はできません。</p>
<p class='footnote'><a name='footnote14' href='#footnote_ref14'>14</a> : それの何が嬉しいのかわからないかもしれませんが、作者にも良くわからない機能なので気にしないでください。おそらく、どのような設定で turnup が動作したのかわかるように、とかだと思います。</p>
</body>
</html>
